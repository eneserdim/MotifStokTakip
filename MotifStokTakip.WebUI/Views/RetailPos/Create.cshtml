@model MotifStokTakip.WebUI.Models.PosCreateViewModel
@{
    ViewData["Title"] = "Perakende Satış";
}
<h3>@ViewData["Title"]</h3>

<form asp-action="Create" method="post" autocomplete="off" id="posForm">
    <!-- CARİ SEÇİMİ -->
    <div class="card mb-3">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6 position-relative">
                    <label class="form-label">Cari (opsiyonel)</label>
                    <input id="custText" class="form-control" placeholder="Ad/ünvan yazın, önerilerden seçin">
                    <input asp-for="CustomerId" type="hidden" id="custId" />
                    <div id="custSuggest"
                         class="list-group position-absolute w-100 shadow-sm"
                         style="z-index:1000; display:none; max-height:260px; overflow:auto;"></div>
                    <div class="form-text">Cari seçmezseniz “Sisteme Kayıtlı Olmayan Cari” olarak kaydedilir.</div>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Kayıtsız Müşteri Adı</label>
                    <input asp-for="WalkInCustomerName" class="form-control" placeholder="(opsiyonel)" />
                </div>
            </div>
        </div>
    </div>

    <!-- BARKOD -->
    <div class="card mb-3">
        <div class="card-header">Barkod Oku / Ekle</div>
        <div class="card-body">
            <input id="scan" class="form-control form-control-lg" placeholder="Barkodu okutun veya yazıp Enter'a basın">
            <div class="form-text">Barkod bulunduğunda kalem adı ve alış otomatik dolar. Satış fiyatını siz girersiniz.</div>
        </div>
    </div>

    <!-- KALEMLER -->
    <div class="card mb-3">
        <div class="card-body p-0">
            <table class="table table-striped table-hover align-middle" class="table table-sm mb-0 align-middle">
                <thead>
                    <tr>
                        <th>Ürün/Kalem</th>
                        <th>Barkod</th>
                        <th class="text-center">Adet</th>
                        <th class="text-end">Alış</th>
                        <th class="text-end">Satış</th>
                        <th class="text-end">Tutar</th>
                        <th class="text-end"></th>
                    </tr>
                </thead>
                <tbody id="rows">
                    @for (var i = 0; i < (Model.Items?.Count ?? 0); i++)
                    {
                        <tr>
                            <td>
                                <input class="form-control" asp-for="Items[@i].ItemName" />
                            </td>
                            <td>
                                <input class="form-control barcode-input" asp-for="Items[@i].Barcode" />
                                <input type="hidden" asp-for="Items[@i].ProductId" />
                                <input type="hidden" class="available" value="0" />
                            </td>
                            <td>
                                <input type="number" step="1" min="1"
                                       class="form-control text-center qty"
                                       asp-for="Items[@i].Quantity" />
                            </td>
                            <td>
                                <input type="number" step="0.01" min="0"
                                       class="form-control text-end buy"
                                       asp-for="Items[@i].BuyPrice" />
                            </td>
                            <td>
                                <input type="number" step="0.01" min="0"
                                       class="form-control text-end sell"
                                       asp-for="Items[@i].SellPrice" />
                            </td>
                            <td class="text-end lineTotal">0,00 ₺</td>
                            <td class="text-end">
                                <button type="button" class="btn btn-sm btn-outline-danger removeRow">
                                    Sil
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- ÖDEME TİPİ & TOPLAM -->
    <div class="card mb-3">
        <div class="card-body d-flex flex-wrap justify-content-end gap-4">
            <div>
                <label class="form-label">Ödeme Tipi</label>
                <select asp-for="PaymentMethod" class="form-select">
                    <option value="">Seçiniz</option>
                    <option>Nakit</option>
                    <option>Kredi Kartı</option>
                    <option>Havale/EFT</option>
                </select>
            </div>
            <div class="text-end">
                <div class="small text-muted">Ara Toplam</div>
                <div class="fs-4"><strong id="subtotal">0,00 ₺</strong></div>
            </div>
        </div>
        <div class="card-footer text-end">
            <button id="saveBtn" class="btn btn-primary">Kaydet</button>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        /* ------------------------ Cari autocomplete ------------------------ */
        const custText = document.getElementById('custText');
        const custId = document.getElementById('custId');
        const custSuggest = document.getElementById('custSuggest');
        let custTimer = null;

        custText?.addEventListener('input', () => {
            const q = custText.value.trim();
            custId.value = "";
            if (custTimer) clearTimeout(custTimer);
            if (q.length < 2) { custSuggest.style.display = 'none'; custSuggest.innerHTML = ''; return; }

            custTimer = setTimeout(async () => {
                try {
                    const r = await fetch(`/RetailPos/SearchCustomers?q=${encodeURIComponent(q)}`);
                    if (!r.ok) throw new Error();
                    const items = await r.json();
                    if (!items?.length) { custSuggest.style.display = 'none'; custSuggest.innerHTML = ''; return; }

                    custSuggest.innerHTML = items.map(x => `
                        <button type="button" class="list-group-item list-group-item-action"
                                data-id="${x.id}" data-name="${x.name}">
                            <div class="fw-semibold">${x.name}</div>
                            <small class="text-muted">${x.phone ?? ''}</small>
                        </button>`).join('');
                    custSuggest.style.display = 'block';
                } catch { custSuggest.style.display = 'none'; custSuggest.innerHTML = ''; }
            }, 250);
        });
        custSuggest?.addEventListener('click', e => {
            const btn = e.target.closest('.list-group-item'); if (!btn) return;
            custId.value = btn.dataset.id; custText.value = btn.dataset.name;
            custSuggest.style.display = 'none'; custSuggest.innerHTML = '';
        });
        custText?.addEventListener('blur', () => setTimeout(() => custSuggest.style.display = 'none', 200));

        /* ------------------------ POS satır/hesap ------------------------ */
        const rows = document.getElementById('rows');
        const scan = document.getElementById('scan');
        const subtotalEl = document.getElementById('subtotal');

        function trSel(tr, sel) { return tr.querySelector(sel); }
        function num(v) { return parseFloat(String(v).replace(',', '.')) || 0; }
        function fmt(n) { return (n).toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' ₺'; }

        function recalc() {
            let sum = 0;
            rows.querySelectorAll('tr').forEach(tr => {
                const qty = num(trSel(tr, '.qty')?.value ?? 0);
                const sell = num(trSel(tr, '.sell')?.value ?? 0);
                const total = qty * sell;
                const cell = trSel(tr, '.lineTotal');
                if (cell) cell.innerText = fmt(total);
                sum += total;
            });
            subtotalEl.innerText = fmt(sum);
        }

        rows?.addEventListener('input', e => {
            if (e.target.closest('.qty') || e.target.closest('.sell')) recalc();
        });
        rows?.addEventListener('click', e => {
            if (e.target.closest('.removeRow')) { e.target.closest('tr').remove(); recalc(); }
        });

        /* ------------------------ Barkodtan ürün getir ------------------------ */
        async function fetchByBarcode(code) {
            const r = await fetch(`/RetailPos/FindByBarcode?code=${encodeURIComponent(code)}`);
            if (!r.ok) return null;
            return await r.json(); // {id,name,barcode,buy,stock}
        }

        // Aynı barkod varsa adet arttır
        function tryIncreaseQuantityIfExists(barcode) {
            const trs = rows.querySelectorAll('tr');
            for (const tr of trs) {
                const bc = trSel(tr, 'input[name*=".Barcode"]')?.value?.trim();
                if (bc && bc === barcode) {
                    const qtyEl = trSel(tr, '.qty');
                    qtyEl.value = (num(qtyEl.value) + 1).toString();
                    recalc();
                    return true;
                }
            }
            return false;
        }

        function addRowFromProduct(p) {
            const idx = rows.querySelectorAll('tr').length;
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td><input class="form-control" name="Items[${idx}].ItemName" value="${(p.name ?? '').replace(/"/g, '&quot;')}" /></td>
                <td>
                    <input class="form-control barcode-input" name="Items[${idx}].Barcode" value="${p.barcode ?? ''}" />
                    <input type="hidden" name="Items[${idx}].ProductId" value="${p.id}" />
                    <input type="hidden" class="available" value="${p.stock ?? 0}" />
                </td>
                <td><input type="number" step="1" min="1" class="form-control text-center qty" name="Items[${idx}].Quantity" value="1" /></td>
                <td><input type="number" step="0.01" min="0" class="form-control text-end buy" name="Items[${idx}].BuyPrice" value="${p.buy ?? 0}" /></td>
                <td><input type="number" step="0.01" min="0" class="form-control text-end sell" name="Items[${idx}].SellPrice" value="0" /></td>
                <td class="text-end lineTotal">0,00 ₺</td>
                <td class="text-end"><button type="button" class="btn btn-sm btn-outline-danger removeRow">Sil</button></td>
            `;
            rows.appendChild(tr);
            recalc();
            // Satış fiyatına odaklan
            tr.querySelector('.sell')?.focus();
        }

        /* Üst taraftaki hızlı barkod alanı */
        let scanDebounceTimer = null;

        // Function to process barcode scan
        async function processBarcodeScanner(code) {
            if (!code) return;

            // aynı barkod varsa artır
            if (tryIncreaseQuantityIfExists(code)) { scan.value = ''; return; }

            const p = await fetchByBarcode(code);
            if (!p) { alert('Barkod bulunamadı'); scan.value = ''; return; }

            addRowFromProduct(p);
            scan.value = '';
        }

        // Auto-submit after 1 second of inactivity
        scan?.addEventListener('input', (e) => {
            if (scanDebounceTimer) clearTimeout(scanDebounceTimer);
            scanDebounceTimer = setTimeout(async () => {
                const code = scan.value.trim();
                if (code) {
                    await processBarcodeScanner(code);
                }
            }, 1000);
        });

        // Keep Enter handler as-is
        scan?.addEventListener('keydown', async (e) => {
            if (e.key !== 'Enter') return;
            e.preventDefault();
            if (scanDebounceTimer) clearTimeout(scanDebounceTimer);
            const code = scan.value.trim();
            await processBarcodeScanner(code);
        });

        /* Satır içindeki barkod kutusunda Enter/blur ile doldurma */
        rows?.addEventListener('keydown', async (e) => {
            const input = e.target.closest('.barcode-input');
            if (!input || e.key !== 'Enter') return;
            e.preventDefault();
            const code = input.value.trim();
            if (!code) return;

            const tr = input.closest('tr');
            const p = await fetchByBarcode(code);
            if (!p) { alert('Barkod bulunamadı'); return; }

            trSel(tr, 'input[name*=".ItemName"]').value = p.name ?? '';
            trSel(tr, 'input[name*=".ProductId"]').value = p.id ?? '';
            trSel(tr, '.available').value = p.stock ?? 0;
            trSel(tr, '.buy').value = p.buy ?? 0;

            // varsa qty artırma mantığını bu senaryoda uygulamayalım, satır zaten var
            recalc();
            trSel(tr, '.sell').focus();
        });

        rows?.addEventListener('blur', async (e) => {
            const input = e.target.closest('.barcode-input');
            if (!input) return;
            const code = input.value.trim();
            if (!code) return;

            // küçük bir gecikme ile aynı Enter handler'ını tekrar tetiklemeyelim
            setTimeout(async () => {
                const tr = input.closest('tr');
                // zaten doluysa dokunma
                if (trSel(tr, 'input[name*=".ProductId"]').value) return;

                const p = await fetchByBarcode(code);
                if (!p) return;

                trSel(tr, 'input[name*=".ItemName"]').value = p.name ?? '';
                trSel(tr, 'input[name*=".ProductId"]').value = p.id ?? '';
                trSel(tr, '.available').value = p.stock ?? 0;
                trSel(tr, '.buy').value = p.buy ?? 0;
                recalc();
            }, 50);
        });

        recalc();
    </script>
}
